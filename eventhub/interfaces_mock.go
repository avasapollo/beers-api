// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock_eventhub is a generated GoMock package.
package eventhub

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// PublishBeerEventCreatedV1 mocks base method
func (m *MockService) PublishBeerEventCreatedV1(event *BeerCreatedV1) error {
	ret := m.ctrl.Call(m, "PublishBeerEventCreatedV1", event)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishBeerEventCreatedV1 indicates an expected call of PublishBeerEventCreatedV1
func (mr *MockServiceMockRecorder) PublishBeerEventCreatedV1(event interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishBeerEventCreatedV1", reflect.TypeOf((*MockService)(nil).PublishBeerEventCreatedV1), event)
}

// PublishReviewCreatedV1 mocks base method
func (m *MockService) PublishReviewCreatedV1(event *ReviewCreatedV1) error {
	ret := m.ctrl.Call(m, "PublishReviewCreatedV1", event)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishReviewCreatedV1 indicates an expected call of PublishReviewCreatedV1
func (mr *MockServiceMockRecorder) PublishReviewCreatedV1(event interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishReviewCreatedV1", reflect.TypeOf((*MockService)(nil).PublishReviewCreatedV1), event)
}
