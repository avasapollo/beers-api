// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock_reviews is a generated GoMock package.
package reviews

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AddReview mocks base method
func (m *MockService) AddReview(review *Review) error {
	ret := m.ctrl.Call(m, "AddReview", review)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddReview indicates an expected call of AddReview
func (mr *MockServiceMockRecorder) AddReview(review interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReview", reflect.TypeOf((*MockService)(nil).AddReview), review)
}

// GetReview mocks base method
func (m *MockService) GetReview(id string) (*Review, error) {
	ret := m.ctrl.Call(m, "GetReview", id)
	ret0, _ := ret[0].(*Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReview indicates an expected call of GetReview
func (mr *MockServiceMockRecorder) GetReview(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReview", reflect.TypeOf((*MockService)(nil).GetReview), id)
}

// GetAllReviewsByBeerID mocks base method
func (m *MockService) GetAllReviewsByBeerID(beerID string) ([]*Review, error) {
	ret := m.ctrl.Call(m, "GetAllReviewsByBeerID", beerID)
	ret0, _ := ret[0].([]*Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllReviewsByBeerID indicates an expected call of GetAllReviewsByBeerID
func (mr *MockServiceMockRecorder) GetAllReviewsByBeerID(beerID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllReviewsByBeerID", reflect.TypeOf((*MockService)(nil).GetAllReviewsByBeerID), beerID)
}

// MockDatabase is a mock of Database interface
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// AddReview mocks base method
func (m *MockDatabase) AddReview(review *Review) error {
	ret := m.ctrl.Call(m, "AddReview", review)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddReview indicates an expected call of AddReview
func (mr *MockDatabaseMockRecorder) AddReview(review interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReview", reflect.TypeOf((*MockDatabase)(nil).AddReview), review)
}

// GetReview mocks base method
func (m *MockDatabase) GetReview(id string) (*Review, error) {
	ret := m.ctrl.Call(m, "GetReview", id)
	ret0, _ := ret[0].(*Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReview indicates an expected call of GetReview
func (mr *MockDatabaseMockRecorder) GetReview(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReview", reflect.TypeOf((*MockDatabase)(nil).GetReview), id)
}

// GetAllReviewsByBeerID mocks base method
func (m *MockDatabase) GetAllReviewsByBeerID(beerID string) ([]*Review, error) {
	ret := m.ctrl.Call(m, "GetAllReviewsByBeerID", beerID)
	ret0, _ := ret[0].([]*Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllReviewsByBeerID indicates an expected call of GetAllReviewsByBeerID
func (mr *MockDatabaseMockRecorder) GetAllReviewsByBeerID(beerID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllReviewsByBeerID", reflect.TypeOf((*MockDatabase)(nil).GetAllReviewsByBeerID), beerID)
}
