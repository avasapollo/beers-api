// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock_beers is a generated GoMock package.
package beers

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AddBeer mocks base method
func (m *MockService) AddBeer(beer *Beer) error {
	ret := m.ctrl.Call(m, "AddBeer", beer)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBeer indicates an expected call of AddBeer
func (mr *MockServiceMockRecorder) AddBeer(beer interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBeer", reflect.TypeOf((*MockService)(nil).AddBeer), beer)
}

// AddBeers mocks base method
func (m *MockService) AddBeers(beers []*Beer) error {
	ret := m.ctrl.Call(m, "AddBeers", beers)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBeers indicates an expected call of AddBeers
func (mr *MockServiceMockRecorder) AddBeers(beers interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBeers", reflect.TypeOf((*MockService)(nil).AddBeers), beers)
}

// GetBeer mocks base method
func (m *MockService) GetBeer(beerID string) (*Beer, error) {
	ret := m.ctrl.Call(m, "GetBeer", beerID)
	ret0, _ := ret[0].(*Beer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBeer indicates an expected call of GetBeer
func (mr *MockServiceMockRecorder) GetBeer(beerID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBeer", reflect.TypeOf((*MockService)(nil).GetBeer), beerID)
}

// GetBeers mocks base method
func (m *MockService) GetBeers(ids ...string) ([]*Beer, error) {
	varargs := []interface{}{}
	for _, a := range ids {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBeers", varargs...)
	ret0, _ := ret[0].([]*Beer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBeers indicates an expected call of GetBeers
func (mr *MockServiceMockRecorder) GetBeers(ids ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBeers", reflect.TypeOf((*MockService)(nil).GetBeers), ids...)
}

// GetAllBeers mocks base method
func (m *MockService) GetAllBeers() ([]*Beer, error) {
	ret := m.ctrl.Call(m, "GetAllBeers")
	ret0, _ := ret[0].([]*Beer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBeers indicates an expected call of GetAllBeers
func (mr *MockServiceMockRecorder) GetAllBeers() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBeers", reflect.TypeOf((*MockService)(nil).GetAllBeers))
}

// MockDatabase is a mock of Database interface
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// AddBeer mocks base method
func (m *MockDatabase) AddBeer(beer *Beer) error {
	ret := m.ctrl.Call(m, "AddBeer", beer)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBeer indicates an expected call of AddBeer
func (mr *MockDatabaseMockRecorder) AddBeer(beer interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBeer", reflect.TypeOf((*MockDatabase)(nil).AddBeer), beer)
}

// AddBeers mocks base method
func (m *MockDatabase) AddBeers(beers []*Beer) error {
	ret := m.ctrl.Call(m, "AddBeers", beers)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBeers indicates an expected call of AddBeers
func (mr *MockDatabaseMockRecorder) AddBeers(beers interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBeers", reflect.TypeOf((*MockDatabase)(nil).AddBeers), beers)
}

// GetBeer mocks base method
func (m *MockDatabase) GetBeer(beerID string) (*Beer, error) {
	ret := m.ctrl.Call(m, "GetBeer", beerID)
	ret0, _ := ret[0].(*Beer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBeer indicates an expected call of GetBeer
func (mr *MockDatabaseMockRecorder) GetBeer(beerID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBeer", reflect.TypeOf((*MockDatabase)(nil).GetBeer), beerID)
}

// GetBeers mocks base method
func (m *MockDatabase) GetBeers(ids ...string) ([]*Beer, error) {
	varargs := []interface{}{}
	for _, a := range ids {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBeers", varargs...)
	ret0, _ := ret[0].([]*Beer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBeers indicates an expected call of GetBeers
func (mr *MockDatabaseMockRecorder) GetBeers(ids ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBeers", reflect.TypeOf((*MockDatabase)(nil).GetBeers), ids...)
}

// GetAllBeers mocks base method
func (m *MockDatabase) GetAllBeers() ([]*Beer, error) {
	ret := m.ctrl.Call(m, "GetAllBeers")
	ret0, _ := ret[0].([]*Beer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBeers indicates an expected call of GetAllBeers
func (mr *MockDatabaseMockRecorder) GetAllBeers() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBeers", reflect.TypeOf((*MockDatabase)(nil).GetAllBeers))
}
